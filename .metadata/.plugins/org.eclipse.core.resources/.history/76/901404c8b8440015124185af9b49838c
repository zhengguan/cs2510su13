import java.util.ArrayList;
import java.util.Arrays;

import tester.Tester;

// Ex 06 ~ 09
interface Predicate<T> {
	// Does this predicate hold for t?
	Boolean apply(T t);
}

public class Map<T> {
	Operation<T, Boolean> OP = new Operation<T, Boolean>();
	
	private class OrComb<T> implements Combiner<T, Boolean> {
		Predicate<T> p;
		
		OrComb(Predicate<T> p) {
			this.p = p;
		}
		
		public Boolean combine(T t, Boolean rst) {
			return this.p.apply(t) || rst;
		}
	}
	
	public Boolean ormap(ArrayList<T> is, Predicate<T> p) {
		return OP.foldl(is, false, new OrComb<T>(p));
	}	
	
	// GIVEN: a list of T and a predicate
	// RETURNS: the index of the first element in lot that is equal to p,
	// if no such element  return -1.
	public int find(ArrayList<T> lot, Predicate<T> p) {
		return findHelper(lot, 0, p);
	}
	
	// GIVEN: a list of T, a start index and a predicate p
	// WHERE: 0 <= start && start <= lot.size();
	// RETURNS: the index of the first element in lot[start, ) that is equal to 
	// p, if no such element  return -1.
	// TERMINATION: the value of (lot.size() - start) becomes smaller
	private int findHelper(ArrayList<T> lot, int start, Predicate<T> p) {
		if (start == lot.size()) {
			return -1;
		}
		else {
			if (p.apply(lot.get(start))) {
				return start;
			}
			else {
				return this.findHelper(lot, start + 1, p);
			}
		}
	}
}

class MapExamples {	
	Map<Integer> map;
	ArrayList<Integer> mt;
	ArrayList<Integer> oddl;
	ArrayList<Integer> evenl;
	ArrayList<Integer> l1;
	Predicate<Integer> isOdd;  
	
	private void reset() {
		this.map = new Map<Integer>();
		this.mt = new ArrayList<Integer>();
		this.oddl = new ArrayList<Integer>();
		this.oddl.addAll(Arrays.asList(new Integer[] {1, 3, 5}));
		this.evenl = new ArrayList<Integer>();
		this.evenl.addAll(Arrays.asList(new Integer[] {2, 4, 6}));
		this.l1 = new ArrayList<Integer>();
		this.l1.addAll(Arrays.asList(new Integer[] {2, 5, 6}));
		this.isOdd = new Predicate<Integer>() {
			public Boolean apply(Integer i) {
				return i % 2 == 1;
			}
		};		
	}
	
	// tests for ormap
	public void testOrmap(Tester t) {
		reset();
		t.checkExpect(map.ormap(mt, isOdd), false);
		t.checkExpect(map.ormap(oddl, isOdd), true);
		t.checkExpect(map.ormap(evenl, isOdd), false);
		reset();
	}
	
	// tests for find	
	public void testFind(Tester t) {
		reset();
		t.checkExpect(map.find(mt, isOdd), -1);
		t.checkExpect(map.find(oddl, isOdd), 0);
		t.checkExpect(map.find(l1, isOdd), 1);
		reset();
	}
}