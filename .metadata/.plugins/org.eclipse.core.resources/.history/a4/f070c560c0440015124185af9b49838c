import java.util.ArrayList;
import java.util.Arrays;

import tester.Tester;

// Ex 06 ~ 09
interface Predicate<T> {
	// Does this predicate hold for t?
	Boolean apply(T t);
}

public class Map<T> {
	Operation<T, Boolean> OP = new Operation<T, Boolean>();
	
	private class OrComb<T> implements Combiner<T, Boolean> {
		Predicate<T> p;
		
		OrComb(Predicate<T> p) {
			this.p = p;
		}
		
		public Boolean combine(T t, Boolean rst) {
			return this.p.apply(t) || rst;
		}
	}
	
	public Boolean ormap(ArrayList<T> is, Predicate<T> p) {
		return OP.foldl(is, false, new OrComb<T>(p));
	}	
	
	// GIVEN: a list of T and a predicate
	// RETURNS: the index of the first element in lot that is equal to p,
	// if no such element  return -1.
	public int find(ArrayList<T> lot, Predicate<T> p) {
		return findHelper(lot, 0, p);
	}
	
	// GIVEN: a list of T, a start index and a predicate p
	// WHERE: 0 <= start && start <= lot.size();
	// RETURNS: the index of the first element in lot[start, ) that is equal to 
	// p, if no such element  return -1.
	// TERMINATION: the value of (lot.size() - start) becomes smaller
	private int findHelper(ArrayList<T> lot, int start, Predicate<T> p) {
		if (start == lot.size()) {
			return -1;
		}
		else {
			if (p.apply(lot.get(start))) {
				return start;
			}
			else {
				return this.findHelper(lot, start + 1, p);
			}
		}
	}
	
	// GIVEN: two list
	// RETURNS: true iff the given two elements are the same
	public Boolean same(ArrayList<T> is, ArrayList<T> js) {
		return (is.size() == js.size()) && sameHelper(is, js, 0);
	}
	
	// RETURNS: true iff the two sub-list is[start,) , js[start, )
	// are the same
	// WHERE: is and js has the same elements;
	private Boolean sameHelper(ArrayList<T> is, ArrayList<T> js, int start) {
		if(start == is.size() && start == js.size()) {
			return true;
		}
		else {
			return is.get(start).equals(js.get(start)) 
					&& sameHelper(is, js, start + 1);
		}
	}
	
	private class ReverseCombiner implements Combiner<T, ArrayList<T>> {
		public ArrayList<T> combine(T t, ArrayList<T> lot) {
			lot.add(t);
			return lot;
		}
	}
	
	// RETURNS: the reverse of the given list
	public ArrayList<T> reverse(ArrayList<T> lot) {
		return new Operation<T, ArrayList<T>>()
				.foldr(lot, new ArrayList<T>(), 
						new ReverseCombiner());
	}
	
	// GIVEN: two lists
	// WHEERE: is.size() == js.size()
	// RETURNS: zip elements in is and js into list of pairs of T and V 
	public <T,V> ArrayList<Pair<T,V>> zip(ArrayList<T> is, ArrayList<V> js) {
		return zipHelper(is, js, 0, new ArrayList<Pair<T, V>>());
	}
	
	// WHERE: is.size == js.size();
	// RETURNS: zip elements in is[start,) and js[start,) into pairs and 
	// add all these pairs to rst
	private <T, V> ArrayList<Pair<T, V>> zipHelper(ArrayList<T> is, ArrayList<V> js, 
			int start, ArrayList<Pair<T, V>> rst){
		if(is.size() == start) {
			return rst;
		}
		else {
			rst.add(new Pair<T, V>(is.get(start), js.get(start)));
			return zipHelper(is, js, start + 1, rst);
		}
	}
	
	// EFFECT: reverse the given list in place
	public <T> void reverseBang(ArrayList<T> is) {
		if(is.size() == 0) {
			return;
		}
		else {
			T t = is.get(0);
			is.remove(0);
			reverseBang(is);
			is.add(t);
			return;
		}
	}
	
	// EFFECT: replace elements in is that satisfy predicate p with t
	<T> void replaceBang(ArrayList<T> is, Predicate<T> p, T t) {
		replaceBangHelper(is, p, t, is.size());
	}
	
	// EFFECT: replace elemets in is[0, end) that satisfy predicate p with t
	<T> void replaceBangHelper(ArrayList<T> is, Predicate<T> p, T t, int end) {
		if (end == 0) {
			return;
		}
		else {
			if (p.apply(is.get(end - 1))) {
				is.set(end - 1, t);
				replaceBangHelper(is, p, t, end - 1);
				return;
			}
		}
	}
	
}

class Pair<X, Y> {
	X left;
	Y right;
	
	Pair(X left, Y right) {
		this.left = left;
		this.right = right;
	}
}


class MapExamples {	
	Map<Integer> map;
	ArrayList<Integer> mt;
	ArrayList<Integer> oddl;
	ArrayList<Integer> evenl;
	ArrayList<Integer> l1;
	ArrayList<Integer> l2;
	ArrayList<Integer> l3;
	Predicate<Integer> isOdd;  
	
	private void reset() {
		this.map = new Map<Integer>();
		this.mt = new ArrayList<Integer>();
		this.oddl = new ArrayList<Integer>();
		this.oddl.addAll(Arrays.asList(new Integer[] {1, 3, 5}));
		this.evenl = new ArrayList<Integer>();
		this.evenl.addAll(Arrays.asList(new Integer[] {2, 4, 6}));
		this.l1 = new ArrayList<Integer>();
		this.l1.addAll(Arrays.asList(new Integer[] {2, 5, 6}));
		this.l2 = new ArrayList<Integer>();
		this.l2.addAll(Arrays.asList(new Integer[] {2, 4, 6}));
		this.l3 = new ArrayList<Integer>();
		this.l3.addAll(Arrays.asList(new Integer[] {6, 4, 2}));
		this.isOdd = new Predicate<Integer>() {
			public Boolean apply(Integer i) {
				return i % 2 == 1;
			}
		};		
	}
	
	// tests for method ormap
	public void testOrmap(Tester t) {
		reset();
		t.checkExpect(map.ormap(mt, isOdd), false);
		t.checkExpect(map.ormap(oddl, isOdd), true);
		t.checkExpect(map.ormap(evenl, isOdd), false);
		reset();
	}
	
	// tests for method find	
	public void testFind(Tester t) {
		reset();
		t.checkExpect(map.find(mt, isOdd), -1);
		t.checkExpect(map.find(oddl, isOdd), 0);
		t.checkExpect(map.find(l1, isOdd), 1);
		reset();
	}
	
	// tests for method same
	public void testSame(Tester t) {
		reset();
		t.checkExpect(map.same(mt, mt), true);
		t.checkExpect(map.same(evenl, l2), true);
		t.checkExpect(map.same(l1, l2), false);
		reset();
	}
	
	// tests for method reverse
	public void testReverse(Tester t) {
		reset();
		t.checkExpect(map.reverse(mt), mt);
		t.checkExpect(map.reverse(l2), l3);
		reset();
	}
	
	// tests for method zip
	public void testZip(Tester t) {
		reset();
		ArrayList<Pair<Integer, Integer>> lop = new ArrayList<Pair<Integer, Integer>>();
		t.checkExpect(map.zip(mt, mt), lop);
		lop.add(new Pair<Integer, Integer>(1, 2));
		lop.add(new Pair<Integer, Integer>(3, 4));
		lop.add(new Pair<Integer, Integer>(5, 6));
		t.checkExpect(map.zip(oddl, evenl), lop);
		reset();
	}
	
	// tests for method reverseBang
	public void testReverseBang(Tester t) {
		reset();
		t.checkExpect(map.reverse(mt), mt);
		map.reverseBang(l2);
		t.checkExpect(l2, l3);		
		reset();
	}
}