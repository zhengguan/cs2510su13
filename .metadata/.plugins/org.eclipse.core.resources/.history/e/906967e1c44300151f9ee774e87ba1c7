// lab 08

import java.util.*;

import tester.Tester;

// Ex 03~05
interface Combiner<A, B> {
	// Combine an A and B into a B
	B combine(A a, B b);
}

class Operation<A, B> {
	// RETURNS: a combination of all elements in is with base, from right to left
	public B foldr(ArrayList<A> is, B base, Combiner<A, B> f) {
		return this.foldrHelper(is, 0, base, f);
	}
	
	// RETURNS: a combination of all elements in is[start, is.size()) with base,
	// from right to left
	private B foldrHelper(ArrayList<A> is, int start, B base, Combiner<A, B> f) {
		return 
			f.combine(is.get(start), this.foldrHelper(is, start + 1, base, f));
	}
}

class OperationExamples {
	Combiner<Integer, Integer> comb;	
	Operation<Integer, Integer> op;
	ArrayList<Integer> mt;
	ArrayList<Integer> l1;
	
	void reset() {
		comb = new Combiner<Integer, Integer>(){
			public Integer combine(Integer a, Integer b) {
				return a + b;
			}
		};
		
		op = new Operation<Integer, Integer>();
		mt = new ArrayList<Integer>();
		l1 = new ArrayList<Integer>().addAll(Arrays.asList(new Integer[]{1, 2})); 
	}
	
	// tests for foldrHelper
	public void testFoldrHelper(Tester t) {
		Arrays.asList(new Integer[]{1, 2});
		
	}
}